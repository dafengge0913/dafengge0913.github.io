<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 大峰哥的博客</title>
    <link>https://dafengge0913.github.io/tags/golang/</link>
    <description>Recent content in Golang on 大峰哥的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Sun, 05 May 2019 11:01:26 +0800</lastBuildDate>
    
	<atom:link href="https://dafengge0913.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据查询用Slice还是Map</title>
      <link>https://dafengge0913.github.io/slice-or-map-for-search/</link>
      <pubDate>Sun, 05 May 2019 11:01:26 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/slice-or-map-for-search/</guid>
      <description>如果有一些不重复的数据需要记录，并且用来查询某一数据是否存在，可以有两种做法：
1、存在slice中，每次查询时遍历slice，如果查到数据则退出遍历，时间复杂度是O(n)。
2、存在一个集合中，golang中可以使用map的key来保存，每次直接判断该数据是否存在，时间复杂度是O(1)。
从时间复杂度上面来看，使用map是有明显优势的，但是如果数据量较小，O(1)可能并没有O(n)的速度快，那么应该如何选择呢？
下面写了一个性能测试：
package main import ( &amp;quot;testing&amp;quot; ) var s []int var m map[int]struct{} func init() { num := 10 s = make([]int, num) m = make(map[int]struct{}, num) for i := 0; i &amp;lt; num; i++ { s[i] = i m[i] = struct{}{} } } func BenchmarkSlice(b *testing.B) { size := len(s) for i := 0; i &amp;lt; b.N; i++ { n := i % size for k := 0; k &amp;lt; len(s); k++ { if s[k] == n { break } } } } func BenchmarkMap(b *testing.</description>
    </item>
    
    <item>
      <title>Golang JSON</title>
      <link>https://dafengge0913.github.io/golang-json/</link>
      <pubDate>Mon, 12 Nov 2018 16:18:40 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/golang-json/</guid>
      <description>博客有段时间没更新了，最近刚刚换了工作，入坑了区块链。
最近帮同事解决了一个修改Ethereum项目中struct结构，但是序列化结果不变的问题，其中涉及了go generate和json序列化等知识，今天决定先整理一下json序列化的部分，以后有时间再总结go generate。
我使用的go版本 go version go1.11.1 windows/amd64  一个简单的例子 package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) type Data struct { Id int `json:&amp;quot;,string&amp;quot;` Name string `json:&amp;quot;name&amp;quot;` PrivateKey string `json:&amp;quot;-&amp;quot;` Option1 string `json:&amp;quot;,omitempty&amp;quot;` Option2 string `json:&amp;quot;,omitempty&amp;quot;` Option3 string `json:&amp;quot;op3,omitempty&amp;quot;` Time time.Time } func main() { data := &amp;amp;Data{ Id: 123, Name: &amp;quot;aaa&amp;quot;, PrivateKey: &amp;quot;pk&amp;quot;, Option1: &amp;quot;op111&amp;quot;, Option3: &amp;quot;&amp;quot;, Time: time.Now(), } b, err := json.Marshal(data) if err !</description>
    </item>
    
    <item>
      <title>逆波兰表示法的Golang实现</title>
      <link>https://dafengge0913.github.io/reverse-polish-notation-in-golang/</link>
      <pubDate>Thu, 30 Aug 2018 15:30:01 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/reverse-polish-notation-in-golang/</guid>
      <description>最近在看程杰写的《大话数据结构》，之前也看过他写的《大话设计模式》，虽然书中好多段子都很“尬”，但是整体风格还是很合我的胃口的。
今天看到第四章，在介绍栈的时候提到了逆波兰表示法，这个算法好像上学的时候在POJ 上面做过。算法我也好久没碰了，今天用Golang实现一下，就当练练手吧。
代码很简单，我写了比较详细的注释，那就直接看代码吧：
package main import ( &amp;quot;bufio&amp;quot; &amp;quot;bytes&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; ) type node struct { value interface{} next *node } // 栈的链式结构实现 type Stack struct { top *node length int } func NewStack() *Stack { return &amp;amp;Stack{nil, 0} } func (s *Stack) Len() int { return s.length } // 获取栈顶元素 func (s *Stack) Peek() interface{} { if s.length == 0 { return nil } return s.top.value } // 弹出栈顶 func (s *Stack) Pop() interface{} { if s.</description>
    </item>
    
    <item>
      <title>Golang Sprintf 源码分析</title>
      <link>https://dafengge0913.github.io/golang-sprintf/</link>
      <pubDate>Thu, 16 Aug 2018 14:31:49 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/golang-sprintf/</guid>
      <description>昨天晚上在地铁上，看了一篇公众号推送的文章—— 深度 | 从Go高性能日志库zap看如何实现高性能Go组件。
文章里提到了日志库使用fmt.Sprintf带来的性能问题。我之前也写过一个基于fmt.Sprintf的日志小轮子，当时也没有太关注这个方法的具体实现，今天有空，就稍微深入的研究一下源码吧。
我使用的go版本 go version go1.10.3 windows/amd64  一个简单的例子 package main import ( &amp;quot;os&amp;quot; &amp;quot;log&amp;quot; &amp;quot;runtime/pprof&amp;quot; &amp;quot;time&amp;quot; &amp;quot;fmt&amp;quot; ) type point struct { x int y int } func main() { f, err := os.Create(&amp;quot;sprintf_cpu.prof&amp;quot;) if err != nil { log.Fatal(&amp;quot;could not create CPU profile: &amp;quot;, err) } if err := pprof.StartCPUProfile(f); err != nil { log.Fatal(&amp;quot;could not start CPU profile: &amp;quot;, err) } defer pprof.StopCPUProfile() n := 10000000 startT := time.</description>
    </item>
    
  </channel>
</rss>