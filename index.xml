<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大峰哥的博客</title>
    <link>https://dafengge0913.github.io/</link>
    <description>Recent content on 大峰哥的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Tue, 25 Dec 2018 10:38:02 +0800</lastBuildDate>
    
	<atom:link href="https://dafengge0913.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于Docker搭建MongoDB集群</title>
      <link>https://dafengge0913.github.io/docker-mongos/</link>
      <pubDate>Tue, 25 Dec 2018 10:38:02 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/docker-mongos/</guid>
      <description>今天要帮公司搭建一个MongoDB的集群，记录一下搭建的过程。
系统环境 Ubuntu 18.04.1 LTS
安装Docker sudo apt install -y docker.io  安装完毕，查看一下Docker版本：
dafengge0913@ubuntu:~$ docker -v Docker version 18.06.1-ce, build e68fc7a  拉取MongoDB镜像 sudo docker pull mongo  查看镜像：
dafengge0913@ubuntu:~$ sudo docker images mongo REPOSITORY TAG IMAGE ID CREATED SIZE mongo latest 525bd2016729 4 weeks ago 383MB  使用Docker启动MongoDB sudo docker run -p 27017:27017 -v $PWD/db:/data/db -d mongo:latest  查看运行状态：
dafengge0913@ubuntu:~/mongo$ sudo docker ps -a --no-trunc CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES bd27d09493c1fd663014410bf1cdf7227326cccb28733738311aa1cfc0cb7647 mongo:latest &amp;quot;docker-entrypoint.</description>
    </item>
    
    <item>
      <title>Linux下添加GoLand快捷方式</title>
      <link>https://dafengge0913.github.io/linux-goland-shortcut/</link>
      <pubDate>Thu, 06 Dec 2018 18:03:17 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/linux-goland-shortcut/</guid>
      <description>最近在Ubuntu下搭建了go的开发环境，GoLand依然是我首选的IDE。
安装过程非常简单，解压缩就可以了。
但是通过sh goland.sh启动的话，每次还要定位到安装目录，有点麻烦。
最开始想的办法是，写一个shell脚本放在桌面，类似这样：
sh /home/dafengge0913/Software/goland-2018.3/bin/goland.sh  但是每次运行这个脚本还是很麻烦，不如windows下通过快捷方式运行方便。
后来在网上搜了一下，发现可以通过GoLand中Tools菜单下的Create Desktop Entry...功能将GoLand添加到Applications中。再通过Add to Favorites加入到dock中，就非常方便了。
那么GoLand是如何实现这个功能的呢？
Google搜了一下&amp;rdquo;Linux如何管理applications&amp;ldquo;。 得知应用会在/usr/share/applications/目录下生成*.desktop文件，然而我定位到该目录下，却并没有找到与GoLand相关的文件。难道他用了一个我猜不到的文件名？但是既然能显示出来icon，那么总该配置一下goland.svg的路径吧，试着搜下文件内容吧：
grep -in &amp;quot;goland&amp;quot; *  依然什么都没有找到，那么推断可能并不在这个目录中。
通过一番研究，发现GoLand在/home/dafengge0913/.local/share/applications目录下生成了jetbrains-goland.desktop文件，内容如下：
[Desktop Entry] Version=1.0 Type=Application Name=GoLand Icon=/home/dafengge0913/Software/goland-2018.3/bin/goland.svg Exec=&amp;quot;/home/dafengge0913/Software/goland-2018.3/bin/goland.sh&amp;quot; %f Comment=The Drive to Develop Categories=Development;IDE; Terminal=false StartupWMClass=jetbrains-goland  那么他为什么放在这呢？原来是这里：
我没有勾选Create the entry for all users，勾选之后，/home/dafengge0913/.local/share/applications中就会出现了jetbrains-goland.desktop文件，内容与上面的相同。说明这个路径下的.desktop文件会对所有用户都有效，如果想只针对某个用户，那么就应该放到/home/{用户名}/.local/share/applications中。</description>
    </item>
    
    <item>
      <title>以太坊 go-ethereum 新增启动参数</title>
      <link>https://dafengge0913.github.io/ethereum-add-flag/</link>
      <pubDate>Fri, 23 Nov 2018 16:23:52 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/ethereum-add-flag/</guid>
      <description>最近在对go-ethereum项目进行二次开发时，增加几个新的启动参数，在运行时当作开关来使用，今天整理一下修改的过程。
go-ethereum版本 v1.8.18-stable  修改过程 在项目入口cmd/geth/main.go的init方法中，注册了项目中使用的所有Flag：
app.Flags = append(app.Flags, nodeFlags...) app.Flags = append(app.Flags, rpcFlags...) app.Flags = append(app.Flags, consoleFlags...) app.Flags = append(app.Flags, debug.Flags...) app.Flags = append(app.Flags, whisperFlags...) app.Flags = append(app.Flags, metricsFlags...)  可以根据参数的类型，定义在合适的文件里，比如我们需要一个debug的参数，那么可以定义在internal/debug/flags.go文件中。
定义一个新的参数：
flagTest1 = cli.StringFlag{ Name: &amp;quot;test1&amp;quot;, Usage: &amp;quot;Just for testing&amp;quot;, }  把它添加到Flags中：
var Flags = []cli.Flag{ verbosityFlag, vmoduleFlag, backtraceAtFlag, debugFlag, pprofFlag, pprofAddrFlag, pprofPortFlag, memprofilerateFlag, blockprofilerateFlag, cpuprofileFlag, traceFlag, flagTest1, }  比如在Setup方法中处理参数，可以增加以下代码：
if value := ctx.GlobalString(flagTest1.Name); value !</description>
    </item>
    
    <item>
      <title>Golang JSON</title>
      <link>https://dafengge0913.github.io/golang-json/</link>
      <pubDate>Mon, 12 Nov 2018 16:18:40 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/golang-json/</guid>
      <description>博客有段时间没更新了，最近刚刚换了工作，入坑了区块链。
最近帮同事解决了一个修改Ethereum项目中struct结构，但是序列化结果不变的问题，其中涉及了go generate和json序列化等知识，今天决定先整理一下json序列化的部分，以后有时间再总结go generate。
我使用的go版本 go version go1.11.1 windows/amd64  一个简单的例子 package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) type Data struct { Id int `json:&amp;quot;,string&amp;quot;` Name string `json:&amp;quot;name&amp;quot;` PrivateKey string `json:&amp;quot;-&amp;quot;` Option1 string `json:&amp;quot;,omitempty&amp;quot;` Option2 string `json:&amp;quot;,omitempty&amp;quot;` Option3 string `json:&amp;quot;op3,omitempty&amp;quot;` Time time.Time } func main() { data := &amp;amp;Data{ Id: 123, Name: &amp;quot;aaa&amp;quot;, PrivateKey: &amp;quot;pk&amp;quot;, Option1: &amp;quot;op111&amp;quot;, Option3: &amp;quot;&amp;quot;, Time: time.Now(), } b, err := json.Marshal(data) if err !</description>
    </item>
    
    <item>
      <title>浏览器阻止的不安全端口</title>
      <link>https://dafengge0913.github.io/unsafe-ports-in-browsers/</link>
      <pubDate>Thu, 20 Sep 2018 11:33:55 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/unsafe-ports-in-browsers/</guid>
      <description>今天在写一个http服务的时候，随手用了一个6666的端口，然而在Chrome中访问时却显示 无法访问此网站 。
首先我怀疑可能是http服务没有正常启动，但是并没有发现程序报错，并且我在cmd下运行：
netstat -ano|findstr &amp;quot;6666&amp;quot;  发现6666端口处于监听状态。
那么换一个端口试试吧，我随便换了一个端口，再访问就正常了，感觉是6666这个端口有问题，什么原因呢？
我又改回6666，改用Firefox访问: Firefox的提示比较明显，浏览器出于安全考虑而阻止了一些可能不安全的端口。我又回去看了一下Chrome，原来是我太粗心，没有仔细看报错信息： 在superuser上找到了Chrome的不安全端口列表，然后Firefox的在这里。
这个限制并不是强制的，可以通过修改浏览器的设置来取消对这些端口的阻止，但是对外提供的服务，不可能让用户去修改他们浏览器中的这些设置，因此应该避免在程序中使用这些端口。
为了通用性，避免使用的端口集合应该是上面两份（或者更多）列表的并集，我用kotlin写了一段代码，进行了合并操作，虽然写代码可能比手工合并用的时间还长，但是这么做更像一个程序员，哈哈。
代码如下：
val chromeBlock = &amp;quot;&amp;quot;&amp;quot; 1, // tcpmux 7, // echo 9, // discard 11, // systat 13, // daytime 15, // netstat 17, // qotd 19, // chargen 20, // ftp data 21, // ftp access 22, // ssh 23, // telnet 25, // smtp 37, // time 42, // name 43, // nicname 53, // domain 77, // priv-rjs 79, // finger 87, // ttylink 95, // supdup 101, // hostriame 102, // iso-tsap 103, // gppitnp 104, // acr-nema 109, // pop2 110, // pop3 111, // sunrpc 113, // auth 115, // sftp 117, // uucp-path 119, // nntp 123, // NTP 135, // loc-srv /epmap 139, // netbios 143, // imap2 179, // BGP 389, // ldap 465, // smtp+ssl 512, // print / exec 513, // login 514, // shell 515, // printer 526, // tempo 530, // courier 531, // chat 532, // netnews 540, // uucp 556, // remotefs 563, // nntp+ssl 587, // stmp?</description>
    </item>
    
    <item>
      <title>Wireshark在Windows系统下抓取Localhost数据包</title>
      <link>https://dafengge0913.github.io/wireshark-capture-localhost-on-windows/</link>
      <pubDate>Tue, 11 Sep 2018 14:18:53 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/wireshark-capture-localhost-on-windows/</guid>
      <description>今天在写一个小东西的时候，发现客户端和服务器通信时，客户端收不到服务器发回的消息，于是决定用wireshark抓一下包，看看是服务器没回，还是客户端有bug。
在wireshark下使用指定端口进行过滤，发现并没有抓取到任何数据包，然而服务器已经正常打印了客户端的请求内容，因此怀疑是wireshark的问题。
Google了一下，在stackoverflow中找到了答案。原因是默认使用的WinPcap不能抓取loopback设备。解决的方法有很多，我选择了安装Npcap，使用wireshark时，选择使用Npcap Loopback Adapter就可以了。
Npcap Loopback Adapter只能抓取loopback的包，如果需要同时抓取localhost和外部访问，可以同时选择Npcap Loopback Adapter和以太网。
通过上面的操作，wireshark可以顺利抓包了，发现服务器回包正常，问题出在了客户端读取上。</description>
    </item>
    
    <item>
      <title>逆波兰表示法的Golang实现</title>
      <link>https://dafengge0913.github.io/reverse-polish-notation-in-golang/</link>
      <pubDate>Thu, 30 Aug 2018 15:30:01 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/reverse-polish-notation-in-golang/</guid>
      <description>最近在看程杰写的《大话数据结构》，之前也看过他写的《大话设计模式》，虽然书中好多段子都很“尬”，但是整体风格还是很合我的胃口的。
今天看到第四章，在介绍栈的时候提到了逆波兰表示法，这个算法好像上学的时候在POJ 上面做过。算法我也好久没碰了，今天用Golang实现一下，就当练练手吧。
代码很简单，我写了比较详细的注释，那就直接看代码吧：
package main import ( &amp;quot;bufio&amp;quot; &amp;quot;bytes&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; ) type node struct { value interface{} next *node } // 栈的链式结构实现 type Stack struct { top *node length int } func NewStack() *Stack { return &amp;amp;Stack{nil, 0} } func (s *Stack) Len() int { return s.length } // 获取栈顶元素 func (s *Stack) Peek() interface{} { if s.length == 0 { return nil } return s.top.value } // 弹出栈顶 func (s *Stack) Pop() interface{} { if s.</description>
    </item>
    
    <item>
      <title>Golang Sprintf 源码分析</title>
      <link>https://dafengge0913.github.io/golang-sprintf/</link>
      <pubDate>Thu, 16 Aug 2018 14:31:49 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/golang-sprintf/</guid>
      <description>昨天晚上在地铁上，看了一篇公众号推送的文章—— 深度 | 从Go高性能日志库zap看如何实现高性能Go组件。
文章里提到了日志库使用fmt.Sprintf带来的性能问题。我之前也写过一个基于fmt.Sprintf的日志小轮子，当时也没有太关注这个方法的具体实现，今天有空，就稍微深入的研究一下源码吧。
我使用的go版本 go version go1.10.3 windows/amd64  一个简单的例子 package main import ( &amp;quot;os&amp;quot; &amp;quot;log&amp;quot; &amp;quot;runtime/pprof&amp;quot; &amp;quot;time&amp;quot; &amp;quot;fmt&amp;quot; ) type point struct { x int y int } func main() { f, err := os.Create(&amp;quot;sprintf_cpu.prof&amp;quot;) if err != nil { log.Fatal(&amp;quot;could not create CPU profile: &amp;quot;, err) } if err := pprof.StartCPUProfile(f); err != nil { log.Fatal(&amp;quot;could not start CPU profile: &amp;quot;, err) } defer pprof.StopCPUProfile() n := 10000000 startT := time.</description>
    </item>
    
    <item>
      <title>Java CPU占用过高故障排除</title>
      <link>https://dafengge0913.github.io/java-high-cpu-troubleshooting/</link>
      <pubDate>Sat, 11 Aug 2018 14:21:23 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/java-high-cpu-troubleshooting/</guid>
      <description> 哎&amp;hellip;最近又被策划坑了，因为配置错误，导致程序出现了死循环。当然，这也不能全怪策划，归根结底还是我代码的健壮性不够。
在排除问题的过程中，我参考了之前解决类似问题时的笔记，最近正好开始写博客了，所以就整理了一下，并且那次出问题的代码也更好理解一些。
故事发生在四年前的一个下午
当时没有什么开发任务，正在刷V2EX，就听Fu老大说，“上边安排给咱们一个任务，说是生产服务器的CPU占用，有时候会突然上涨到100%，别的组都查不到原因，也复现不了问题，现在服务器又出问题了，任务交给咱们组了”， 我听到这个消息，心想我表（zhuang）现（bi）的机会来了。
那个时候我是一个比现在还菜的菜鸟，并且大部分时间在写JavaScript，所以我后面解决问题时所用到的工具，其实我之前根本就没听过，因此这次解决问题的思路可能更值得记录。
我的思路是这样的：
1. 使用top查看系统的资源占用情况 连到生产服务器，执行top命令，发现双核的CPU几乎全被一个PID为5739的进程给用掉了，99.2%的用户空间（也可以叫用户态）消耗，极有可能是出现了死循环。
Java应用造成us高的主要原因是线程一直处于可运行（Runnable）状态，通常这些线程在执行无阻塞操作、循环、正则或纯粹的计算等任务，另一个可能造成us高的原因是频繁GC。
2. 使用ps命令查看进程对应的是哪个程序 可以看出，罪魁祸首是ccbs。这里也可以使用jps命令。
3. 使用top -p [PID] -H 观察该进程中所有线程的资源占用 执行 top -p 5739 -H
   参数 说明     -p 需要监控的进程id   -H 显示每个线程的情况，否则就是进程的总状态    发现若干线程实时CPU占用率（%CPU）较高，并且处理机使用时间（TIME+）非常长，6146线程实际占有处理机852分钟40.44秒，那么如何知道这个线程正在干嘛呢？我猜测Java这么成熟的平台，肯定有可以解决问题的工具，毕竟这样的问题很多人都会遇到。
4.使用jstack查看线程快照 通过在搜索引擎中查找，我得知通过jstack可以生成java虚拟机当前时刻的线程快照。
执行jstack 5739 | grep -A 100 nid=0x1802
jstack后面的参数是PID的值，nid的含义是操作系统映射的线程id，可以通过nid的值过滤上面占用CPU较高的6146线程，线程id需要转成十六进制，并且字母要小写。
通过观察输出，可以看到线程长期处于可运行状态，直接根据堆栈信息找到对应的代码。
5.解决bug 这部分代码并不是我写的，很明显这种写法非常不好，一旦serviceAddressType的值不在那三种范围内，就会产生死循环，我重写了这里的逻辑，问题解决。
总结  任何数据都可能出错，程序逻辑应该充分考虑出现问题的可能。 我们遇到的问题，很可能别人也遇到过，要擅于使用搜索引擎。  </description>
    </item>
    
    <item>
      <title>Java benchmark 工具 JMH</title>
      <link>https://dafengge0913.github.io/jmh/</link>
      <pubDate>Wed, 01 Aug 2018 17:26:21 +0800</pubDate>
      
      <guid>https://dafengge0913.github.io/jmh/</guid>
      <description>为什么需要Benchmark工具 如果想要知道一段代码的性能如何，一种常用的做法可能是这样的：
long start = System.currentTimeMillis(); // do something ... System.out.println(System.currentTimeMillis() - start);  这样做，存在几个问题：
 结果不够精确
首先，System.currentTimeMillis() 的注释里明确表示了，根据操作系统的不同，会存在数十毫秒的误差。虽然这个问题比较容易解决，但是造成测试结果不精确的主要原因并不是时间函数的误差，而是JVM和JIT在运行时会对Java应用进行大量的优化，比如某个计算的结果并没有被使用，那么这段代码在执行时就会被忽略，这样的问题比较难察觉。 统计结果有限
如果需要打印多种类型的测试数据，就需要增加很多额外的代码。 配置不灵活
不容易修改测试的类型和条件。
  因此，使用一款靠谱的benchmark工具，既可以减少工作量，又可以确保性能优化过程不被错误的测试数据误导。
之前使用Golang开发的时候，SDK自带的benchmark就非常好用。转到Java栈之后，我也想找一款好用的benchmark工具，后来通过《Effective Java》了解到了JMH。
JMH概述 JMH 即Java Microbenchmark Harness，是用于代码微基准测试的工具套件，由JIT的开发人员编写，他们应该比任何人都了解JIT对于测试的影响。
JMH可以精确测量方法在不同输入参数情况下的执行时间和吞吐量。
一个例子 这里使用Gradle来搭建测试环境，首先在build.gradle中添加依赖：
testCompile &#39;org.openjdk.jmh:jmh-core:jar:1.21&#39; testCompile &#39;org.openjdk.jmh:jmh-generator-annprocess:1.21&#39;  编写一个简单的类，测试两种字符串连接操作的性能：
package com.dafengge0913.benchmark; import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.infra.Blackhole; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder; import java.util.concurrent.TimeUnit; @BenchmarkMode({Mode.AverageTime, Mode.Throughput}) @Warmup(iterations = 1) @Measurement(iterations = 2, time = 1) @OutputTimeUnit(TimeUnit.</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://dafengge0913.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dafengge0913.github.io/about/</guid>
      <description>大峰哥 东北人 90后 后端打杂程序员
大峰哥是我大学同学给我起的绰号 也是我诸多绰号中 听起来最带感的一个
本站文章除非特殊标注均为原创 转载请注明出处</description>
    </item>
    
  </channel>
</rss>